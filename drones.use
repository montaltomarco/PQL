model DroneModel

-- ******************************** Déclaration des Classes ********************************
class Temps
	attributes
		id : Integer
		tempsSuivant : Temps

	operations
		execute() begin
			self.tempsSuivant := new Temps;

			for drone in self.drone_DronePointTemps do
				if drone.commandeLivree = false then
					drone.avance1Pas();
					else
						drone.recule1Pas();
				end
				--insert(self, self.tempsSuivant) into Temps_Association;
				--insert (drone, drone.parcoursDrone.at(drone.idPointCourant),self) into DronePointTemps_Association;
			end
		end

		tempsSuivantOp():Temps begin
			result := self.tempsSuivant;
		end

		succPlus() : Set(Temps) = self.succ->closure(t|t.succ)

		predPlus() : Set(Temps) = self.pred->closure(t|t.pred)

end

class Point
	attributes
		id : Integer init = 0
		estReceptacle : Boolean init = false
		estEntrepot : Boolean init = false
		estPointVide : Boolean init = false
		contenancePoint : Integer init = 0
	operations
		estLibreOp():Boolean begin
			result := (self.contenancePoint < 1);
		end
		estOccupeOp():Boolean begin
			result := (self.contenancePoint = 1);
		end
statemachines

	 psm Usage

	 states
	 -- The start node
	 startUp:initial
	 -- The initial state after creation.
	 estLibre [self.contenancePoint = 0 and ((self.estReceptacle = false and self.estEntrepot = false and self.estPointVide = false) or (self.estReceptacle = true and self.estEntrepot = false and self.estPointVide = false) or (self.estReceptacle = false and self.estEntrepot = true and self.estPointVide = false) or (self.estReceptacle = false and self.estEntrepot = false and self.estPointVide = true))]
	 -- une drone est arrivee.
	 droneArrivee [self.contenancePoint = 1]

	 transitions
	 -- Define the first state after creation.
	 startUp -> estLibre { create }
	 -- A drone has arrived.
	 estLibre -> droneArrivee {[self.contenancePoint = 1] estOccupeOp()}
	 -- Abort
	 droneArrivee -> estLibre {estLibreOp()}
	 end
end

class PointVide
	operations
		estSurvole():Boolean begin
			result := (self.point_Vide.contenancePoint <1);
		end
end

class Grille
	attributes
		tempsCourant : Temps
	operations
		getEntrepot():Entrepot begin
			--result := self.entrepot_Position; --Défini grâce à l'assocition "position"
		end

		executer() begin
			self.tempsCourant.execute();
			self.tempsCourant := self.tempsCourant.tempsSuivant;
		end
end

class Drone 
	attributes
		batterie : Integer init = 3
		capaciteMaxDCAP : Integer init = 0
		capaciteChargeeCommande : Integer init = 0
		commandeLivree : Boolean init = false
		parcoursDrone : Sequence(Point) init = Sequence{}
		idPointCourant : Integer init = 0
		nbPoints : Integer init = 0
		tempsCourant : Temps
		tempsSuivant : Temps
		droneStatus : Integer init = 0 -- 0 pour en vol et 1 pour posé
		
	operations
		ajouterPoint(p:Point) begin
			self.parcoursDrone := self.parcoursDrone->append(p);
		end

		chargerBatterie() begin
			self.batterie := self.batterie + 1
		end

		atterissageDrone() begin
			self.droneStatus := 1;
		end

		decollageDrone() begin
			self.droneStatus := 0;
		end

		livrerCommande() begin
			self.commandeLivree := true;
			self.capaciteChargeeCommande := 0;
		end

		avance1Pas() begin
			if self.batterie <= 1 and (self.parcoursDrone->at(self.idPointCourant).estReceptacle = true or self.parcoursDrone->at(self.idPointCourant).estEntrepot = true) then
				if self.droneStatus = 0 then
					self.atterissageDrone();
					self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.batterieEnCours := true;
					else
						self.chargerBatterie();
				end
				else
					if self.parcoursDrone->size() = (self.idPointCourant + 1) and self.commandeLivree = false then
						if self.droneStatus = 0 then
							self.atterissageDrone();
							self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.livraisonEnCours := true;
							else
								self.livrerCommande();
						end
						else
							if self.droneStatus = 1 then
								self.decollageDrone();
								if self.parcoursDrone->at(self.idPointCourant).estReceptacle then
									self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.batterieEnCours := false;
									self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.livraisonEnCours := false;
									else
										self.attendre();
								end
								else
									self.batterie := self.batterie - 1;
									self.parcoursDrone->at(self.idPointCourant).contenancePoint := 0;
									self.idPointCourant := self.idPointCourant + 1;
									self.parcoursDrone->at(self.idPointCourant).contenancePoint := 1;
							end
					end
			end
		end

		attendre() begin
		end

		recule1Pas() begin
			if self.batterie <= 1 and (self.parcoursDrone->at(self.idPointCourant).estReceptacle = true or self.parcoursDrone->at(self.idPointCourant).estEntrepot = true) then
				if self.droneStatus = 0 then
					self.atterissageDrone();
					self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.batterieEnCours := true;
					else
						self.chargerBatterie();
				end
				else
					if self.idPointCourant = 0 then
						if self.droneStatus = 0 then
							self.atterissageDrone();
							else
								self.attendre();
						end
						else
							self.batterie := self.batterie - 1;
							self.parcoursDrone->at(self.idPointCourant).contenancePoint := 0;
							self.idPointCourant := self.idPointCourant - 1;
							self.parcoursDrone->at(self.idPointCourant).contenancePoint := 1;
							if self.parcoursDrone->at(self.idPointCourant).estReceptacle then
								self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.batterieEnCours := false;
								self.parcoursDrone->at(self.idPointCourant).receptacle_Receptacle.livraisonEnCours := false;
								else
									self.attendre();
							end
					end
			end
		end

	statemachines
		psm Usage
		states
		-- The start node
		startUp:initial
		-- The initial state after creation.
		est_a_l_entrepot [self.batterie = 3 and self.commandeLivree = false]
		transitions
		-- Define the first state after creation.
		startUp -> est_a_l_entrepot { create }
	end
end

class Entrepot
	attributes
		capaciteDNB : Integer
		capaciteRNB : Integer
	operations
		estSurvole():Boolean begin
			result := false; --L'entrepot a une capacité de stockage "illimité"
		end
		chargerProduitsDrone(d:Drone)
		chargerBatterie()
end

class Produit
	attributes
		nom : String
		reference : String
		prix : Integer
		quantite : Integer
	operations
		definirProduit(n:String, r:String, p:Integer, q:Integer) begin
			self.nom := n;
			self.reference := r;
			self.prix := p;
			self.quantite := q;
		end
end

class Commande
	attributes
		capaciteComm : Integer
	operations
		ajouterProduit(pr:Produit)
		supprimerProduit(pr:Produit)
end

class Receptacle
	attributes
		capaciteRCAP : Integer
		occupationPlateforme : Boolean
		livraisonEnCours : Boolean
		batterieEnCours : Boolean
	operations
		estSurvole():Boolean begin
			result := (self.point_Receptacle.contenancePoint < 1);
		end
		estLivrable(d : Drone) : Boolean begin
			if d.capaciteChargeeCommande > self.capaciteRCAP then
				result := false
				else
				result := true
			end
		end
end

-- ******************************** Déclaration des Associations ********************************

-- Convention de nommage des rôles : nomRôle_NomAssociation
association GrilleTemps_Association between
	Grille[0..1] role grille_GrilleTemps
	Temps[0..*] role temps_GrilleTemps
end

association Temps_Association between
	Temps[*] role pred
	Temps[*] role succ
end

association DronePointTemps_Association between
	Drone[0..*] role drone_DronePointTemps
	Point[0..*] role point_DronePointTemps
	Temps[0..*] role temps_DronePointTemps
end

association Grille_Association between
	Grille[1] role grille_Grille
	Point[*] role points_Grille
end

association Points_Association between
	Point[*] role pointPrecedents_Points
	Point[*] role pointsSuivants_Points
end

association Commande_Association between
	Commande[0..1] role commande_Commande
	Receptacle[0..1] role receptacle_Commande
	Produit[0..*] role produits_Commande
end

association Gestion_Association between
	Entrepot[1] role entrepot_Gestion
	Commande[*] role commandes_Gestion
end

association Drone_Association between
	Drone[0..1] role drone_Drone
	Commande[1] role commande_Drone
end

association DronesEntrepot_Association between
	Entrepot[1] role entrepot_DronesEntrepot
	Drone[*] role drone_DronesEntrepot
end

association Receptacle_Association between
	Receptacle[0..1] role receptacle_Receptacle
	Point[0..1] role point_Receptacle
end

association Entrepot_Association between
	Entrepot[0..1] role entrepot_Entrepot
	Point[0..1] role point_Entrepot
end

association Vide_Association between
	PointVide[0..1] role pointVide_Vide
	Point[0..1] role point_Vide
end

-- ******************************** Déclaration des Invariants + Pré et Post Conditions********************************
constraints
-- Invariants:
	-- Pour le Temps
	context Temps inv grille1_1: self.grille_GrilleTemps->size = 1
	context Temps inv succ0_1: self.succ->size <= 1
	context Temps inv pred0_1: self.pred->size <= 1
	context t1:Temps inv commutativity: Temps.allInstances->forAll(t2 | t1.succ->includes(t2) implies t1.grille_GrilleTemps=t2.grille_GrilleTemps)
	-- context Temps inv tempsPointDrone1_n_1: self.drone_DronePointTemps.forAll(d|d.point_DronePointTemps->size() = 1) -- A un temps donné, tous les drones n'appartiennent qu'à un seul et unique point => remplacé par l'invariant suivant "drone1PointParTemps"
	context Temps inv drone1PointParTemps: Temps.allInstances->forAll(t|not t.drone_DronePointTemps->exists(d|d.point_DronePointTemps->size() > 1))-- and t.drone_DronePointTemps->size() = Drone.allInstances->size() and t.point_DronePointTemps->size() = Point.allInstances->size())

	-- Pour la Grille
	context Grille inv nbPoints : self.points_Grille->size >= 0
	context Grille inv oneLastTemps:
	  self.temps_GrilleTemps->one(last | self.temps_GrilleTemps->forAll(t|last.succPlus()->includesAll(t.succPlus())))
	context Grille inv noCycles:
	  self.temps_GrilleTemps->forAll(t | t.predPlus()->excludes(t))

	-- Pour les Points
	context Point inv idPoints : self.id > 0
	context Point inv successeurs : self.pointsSuivants_Points->size <= 4 and self.pointsSuivants_Points->size >= 0 
	context Point inv capacite : self.contenancePoint <= 1 and self.contenancePoint >= 0
	context Point inv interblocagePoint : self.pointsSuivants_Points->exists(p|p.contenancePoint = 0) //Au moins une porte de sortie par Point

	-- Pour les Drones
	context Drone inv batterie : self.batterie >= 0 and self.batterie <= 3
	context Drone inv capacite_DCAP: self.capaciteMaxDCAP > 0

	-- Pour les Produits


	-- Pour les Commandes
	context Commande inv receptacle1_1 : self.receptacle_Commande->size = 1
	context Commande inv produit1_n : self.produits_Commande->size > 0

	-- Pour le Réceptacle
	context Receptacle inv capaciteRCAP : self.capaciteRCAP > 0
	context r1:Receptacle inv receptacle2Coups : r1.point_Receptacle.pointsSuivants_Points->exists(p|p.estReceptacle = true) or r1.point_Receptacle.pointsSuivants_Points->exists(r2|r2.pointsSuivants_Points->exists(r3|(r3.estReceptacle = true and r3 <> r1.point_Receptacle)))
	context Receptacle inv protectionReceptacle : self.point_Receptacle.estEntrepot <> true and self.point_Receptacle.estPointVide <> true -- Un point de type Receptacle n'est pas un Point Vide ni un Entrepot

	-- Pour l'Entrepôt
	context Entrepot inv nbDrones0_DNB : self.capaciteDNB >= 0
	context Entrepot inv nbReceptacless0_RNB : self.capaciteRNB > 0
	context Entrepot inv receptacleEntrepot : self.point_Entrepot.pointsSuivants_Points->exists(p|p.estReceptacle = true) --Au moins un réceptacle après un entrepôt
	context Entrepot inv protectionEntrepot : self.point_Entrepot.estReceptacle <> true and self.point_Entrepot.estPointVide <> true -- Un point de type Entrepot n'est pas un Point Vide ni un Receptacle

	-- Pour le Point Vide
	context PointVide inv protectionPointVide : self.point_Vide.estReceptacle <> true and self.point_Vide.estEntrepot  <> true -- Un point de type PointVide n'est pas un Entrepot ni un Receptacle

--Pré et Post Conditions

	-- Pour la Grille

	-- Pour les Points

	-- Pour les Drones
		context Drone::chargerBatterie()
		pre batteriePre0: self.point_DronePointTemps->asSequence()->at(0).estReceptacle = true
		pre batteriePre1: self.point_DronePointTemps->asSequence()->at(0).contenancePoint = 1
		pre batteriePre2: self.batterie < 3
		pre batteriePre3: self.point_DronePointTemps->asSequence()->at(0).receptacle_Receptacle.livraisonEnCours = false
		pre batteriePre4: self.point_DronePointTemps->asSequence()->at(0).receptacle_Receptacle.batterieEnCours = true
		post batteriePost: self.batterie <= 3

		context Drone::livrerCommande()
		pre livrerPre1: self.capaciteChargeeCommande > 0
		pre livrerPre2: self.commandeLivree = false
		post livrerPost1: self.capaciteChargeeCommande = 0
		post livrerPost2: self.commandeLivree = true

		--context Drone::avance1Pas()
		--pre avancerPre1: self.parcoursDrone->at(self.idPointCourant).contenancePoint = 1
		--pre avancerPre2: self.parcoursDrone->at(self.idPointCourant + 1).contenancePoint = 0
		--pre avancerPre3: self.parcoursDrone->size() <> (self.idPointCourant + 1)
		--pre avancerPost1: self.parcoursDrone->at(self.idPointCourant).contenancePoint = 0
		--pre avancerPost2: self.parcoursDrone->at(self.idPointCourant + 1).contenancePoint = 1

		--context Drone::recule1Pas()
		--pre reculerPre1: self.parcoursDrone->at(self.idPointCourant).contenancePoint = 1
		--pre reculerPre2: self.parcoursDrone->at(self.idPointCourant + 1).contenancePoint = 0
		--pre reculerPre3: (self.idPointCourant - 1) <> 0
		--pre reculerPost1: self.parcoursDrone->at(self.idPointCourant).contenancePoint = 0
		--pre reculerPost2: self.parcoursDrone->at(self.idPointCourant - 1).contenancePoint = 1

	-- Pour les Produits

	-- Pour les Commandes

	-- Pour le Réceptacle

	-- Pour l'Entrepôt

